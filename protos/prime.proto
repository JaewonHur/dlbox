// Copyright (c) 2022

syntax = "proto3";

import "google/protobuf/empty.proto";

package prime;

// Prime service definition
service PrimeServer {

/* RPCs for general program execution between FE and DE  */

  // Export class or function definition from FE to DE
  rpc ExportDef (ExportDefArg) returns (Ref) {}
  // Delete object in DE
  rpc DeleteObj (DeleteObjArg) returns (google.protobuf.Empty) {}
  // Copy object in FE to DE
  rpc AllocateObj (AllocateObjArg) returns (Ref) {}
  // Invoke method in DE
  rpc InvokeMethod (InvokeMethodArg) returns (Ref) {}

/*********************************************************/

/* RPCs for model training                               */

  // Fit model in DE
  rpc FitModel (FitModelArg) returns (Model) {}
  // Supply data for FitModel
  rpc SupplyData (SupplyDataArg) returns (Ref) {}
  // Stream data for FitModel
  rpc StreamData (StreamDataArg) returns (google.protobuf.Empty) {}

/*********************************************************/
}

/* Input message for ExportDef
   Args:
     fullname (string)   : name of the definition which is to be defined in DE.
     type (bytes)        : type of the definition,
                           must be one of <class 'type'>, <class 'function'>.
     source (string)     : relocatable source code of the definition,
                           source must be self-confined
                             (i.e., it must contain all referenced objects).
                           name of definition in source must match `name`.
*/ 
message ExportDefArg {
  string fullname = 1;
  bytes  type     = 2;
  string source   = 3;
}

/* Input message for DeleteObj
   Args;
     val (string)  : name of the object to be deleted.
*/
message DeleteObjArg {
  string name = 1;
}
  
/* Input message for AllocateObj
   Args:
     val (bytes)   : serialized value of the object
*/
message AllocateObjArg {
  bytes val = 1;
}

/* Input message for InvokeMethod
   Args:
     obj (string)                : name of the object defined in DE, which contains method.
                                   if `obj` is not set, the method is global.
     method (string)             : name of the method to be invoked.
     args (repeated bytes)       : list of the objects in DE, which will be used as input arguments.
     kwargs (map<string,bytes>)  : map of key and object to be used as keyword arguments.
*/
message InvokeMethodArg {
  string             obj    = 1;
  string             method = 2;
  repeated bytes     args   = 3;
  map<string,bytes>  kwargs = 4;
}

/* Input message for FitModel
   Args:
     trainer (bytes)               : serialized trainer instance in FE to train the model
     model (bytes)                 : serialized ML model from FE (i.e., PytorchLightningModule).
                                     class definition of the model must be already defined in DE.
     d_args (repeated bytes)       : list of serialized arguments to construct DataLoader
     d_kwargs (map<string,bytes>)  : map of key and serialized arguments to construct DataLoader
     args (repeated bytes)         : list of serialized arguments to Fit.
     kwargs (map<string,bytes>)    : map of key and serialized arguments to be used as keyword
                                     arguments.
*/
message FitModelArg {
  bytes              trainer    = 1;
  bytes              model      = 2;
  repeated bytes     d_args     = 4;
  map<string,bytes>  d_kwargs   = 5;
  repeated bytes     args       = 6;
  map<string,bytes>  kwargs     = 7;
}

/* Input message for SupplyData
   Args:
     datapairs (repeated DataPair) : list of DataPairs containing samples and labels.
*/
message SupplyDataArg {
  repeated DataPair  datapairs = 1;
}

/* Reference to the object in DE
   Args:
     name (string) : name of the object in DE.
     error (bytes) : serialized error if an error occurs while handling the request.
*/
message Ref {
  optional string name  = 1;
  optional bytes  obj   = 2;
  optional bytes  error = 3;
}

/* Message containing optimized ML model
   Args:
     val (bytes)   : serialized value of the optimized ML model.
     error (bytes) : serialized error if an error occurs while handling the request.
*/
message Model {
  optional bytes val   = 1;
  optional bytes error = 2;
}

/* Message of sample & label pair
   Args:
     sample (bytes) : serialized bytes of sample
     label  (bytes) : serialized bytes of label
*/
message DataPair {
  bytes sample = 1;
  bytes label  = 2;
}

/* Input message for StreamData
   Args:
     samples (bytes)             : reference to the samples Tensor
     labels (bytes)              : reference to the labels Tensor
     transforms (repeated bytes) : list of serialized transform functions or name
     args (repeated bytes)       : list of serialized arg tuples
                                   ellipsis for the place holder
     kwargs (repeated bytes)     : list of serialized kwarg dicts
                                   ellipsis for the place holer
     max_epoch (bytes)           : serialized maximum number of epochs
*/
message StreamDataArg {
  bytes          samples    = 1;
  bytes          labels     = 2;
  repeated bytes transforms = 3;
  repeated bytes args       = 4;
  repeated bytes kwargs     = 5;
  bytes          max_epoch  = 6;
}
