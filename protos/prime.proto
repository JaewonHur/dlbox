// Copyright (c) 2022

syntax = "proto3";

import "google/protobuf/empty.proto";

package prime;

// Prime service definition
service PrimeServer {

/* RPCs for general program execution between FE and DE  */

  // Export class or function definition from FE to DE
  rpc ExportDef (ExportDefArg) returns (Ref) {}
  // Delete object in DE
  rpc DeleteObj (DeleteObjArg) returns (google.protobuf.Empty) {}
  // Copy object in FE to DE
  rpc AllocateObj (AllocateObjArg) returns (Ref) {}
  // Invoke method in DE
  rpc InvokeMethod (InvokeMethodArg) returns (Ref) {}
  // Invoke batched method
  rpc InvokeMethods (InvokeMethodsArg) returns (Refs) {}

/*********************************************************/

/* RPCs for model training                               */

  // Export model definition from FE to DE
  rpc ExportModel (ExportModelArg) returns (Ref) {}
  // Fit model in DE
  rpc FitModel (FitModelArg) returns (Model) {}

/*********************************************************/
}

/* Input message for ExportDef
   Args:
     fullname (string)   : name of the definition which is to be defined in DE.
     type (bytes)        : type of the definition,
                           must be one of <class 'type'>, <class 'function'>.
     source (string)     : relocatable source code of the definition,
                           source must be self-confined
                             (i.e., it must contain all referenced objects).
                           name of definition in source must match `name`.
*/ 
message ExportDefArg {
  string fullname = 1;
  bytes  type     = 2;
  string source   = 3;
}

/* Input message for DeleteObj
   Args;
     val (string)  : name of the object to be deleted.
*/
message DeleteObjArg {
  string name = 1;
}
  
/* Input message for AllocateObj
   Args:
     val (bytes)   : serialized value of the object
*/
message AllocateObjArg {
  bytes val = 1;
}

/* Input message for InvokeMethod
   Args:
     obj (string)                : name of the object defined in DE, which contains method.
                                   if `obj` is not set, the method is global.
     method (string)             : name of the method to be invoked.
     args (repeated bytes)       : list of the objects in DE, which will be used as input arguments.
     kwargs (map<string,bytes>)  : map of key and object to be used as keyword arguments.
*/
message InvokeMethodArg {
  string             obj    = 1;
  string             method = 2;
  repeated bytes     args   = 3;
  map<string,bytes>  kwargs = 4;
}

/* Input message for InvokeMethods
   Args:
     lineages (map<string,InvokeMethodArg>) : map of ref and argumetns for InvokeMethod.
*/
message RefInvokeMethodArg {
  string             ref    = 1;
  InvokeMethodArg    arg    = 2;
}

message InvokeMethodsArg {
  repeated RefInvokeMethodArg lineages = 1;
}

/* Input message for ExportModel
   Args:
     fullname (string)   : name of the model definition which is to be defined in DE.
     source (string)     : relocatable source code of the definition,
                           source must be self-confined
                             (i.e., it must contain all referenced objects).
                           name of definition in source must match `fullname`.
*/
message ExportModelArg {
  string fullname = 1;
  string source   = 2;
}

/* Input message for FitModel
   Args:
     trainer (str)                 : trainer
     model   (str)                 : model
     args    (repeated bytes)      : args
     kwargs  (map<string,bytes>)   : kwargs
*/
message FitModelArg {
  string            trainer     = 1;
  string            model       = 2;
  repeated bytes    args        = 3;
  map<string,bytes> kwargs      = 4;
}

/* Reference to the object in DE
   Args:
     name (string) : name of the object in DE.
     error (bytes) : serialized error if an error occurs while handling the request.
*/
message Ref {
  optional string            name    = 1;
  optional bytes             obj     = 2;
  optional bytes             error   = 3;
  map<string,bytes> profile = 4;
} 

/* References to the object in DE
   Args:
     refs (repated Ref) : list of Ref
*/
message Refs {
  repeated Ref    refs  = 1;
}

/* Message containing optimized ML model
   Args:
     val (bytes)   : serialized value of the optimized ML model.
     error (bytes) : serialized error if an error occurs while handling the request.
*/
message Model {
  optional bytes val                 = 1;
  optional bytes error               = 2;
  map<string,bytes> profile = 3;
}
